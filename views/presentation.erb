<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <title>Introduction to Backbone JS</title>
    <link charset="utf-8" href="/css/style.css" media="screen" rel="stylesheet" type="text/css">
    <link charset="utf-8" href="http://fonts.googleapis.com/css?family=Telex" media="screen" rel="stylesheet" type="text/css">
    <link charset="utf-8" href="/css/sh.css" media="screen" rel="stylesheet" type="text/css">
    <script charset="utf-8" src="/javascript/sh.js" type="text/javascript"></script>
    <script charset="utf-8" src="/javascript/sh_javascript_dom.js" type="text/javascript"></script>
    <script charset="utf-8" src="/javascript/jquery.js" type="text/javascript"></script>
    <script charset="utf-8" src="http://documentcloud.github.com/underscore/underscore-min.js" type="text/javascript"></script>
    <script type='text/javascript' src="http://documentcloud.github.com/backbone/backbone-min.js"></script>
    <script charset="utf-8" src="/javascript/master.js" type="text/javascript"></script>
  </head>
  <body onload="sh_highlightDocument();">

    
    <div class='slide'>
      <h1 class='center highlight'>Introduction to Backbone JS</h1>
      <div class='content center' style="font-size:26px; margin-top:40px">
        <a href="http://github.com/wookimiii" target="_blank">Andrew Kim</a> 
        and 
        <a href="http://github.com/trivektor" target="_blank">Tri Vuong</a>
        <p style="margin-top:15px">Search and Data Tools</p>
      </div>
    </div>

    
    <div class='slide'>
      <h2 class='title'>What is Backbone JS?</h2>
      <div class='content spacing_top'>
        <ul>
          <li>emerging Javascript framework</li>
          <li>created by Jeremy Ashkenas, author of CoffeeScript</li>
          <li>MVC Architecture</li>
          <li>used by major applications (LinkedIn, Basecamp, Pandora, Flow etc)</li>
        </ul>
      </div>
    </div>
    
    
    <div class='slide'>
      <h2 class='title'>Status Quo</h2>
      <div class='content'>
        <pre class='sh_javascript_dom'>
//Callback soup and salad (not as good as Specialty's though)
$("#element").click(function(){
  ...
})

$("#another_element").change(function(){
  if (...) {
    ...
  } else {
    $.ajax({ url: url, type: "GET", success: function(response) { ... } })
  }
})

$("#and_another_element").autocomplete({
  serviceUrl: url,
  onSelect: function(value, data) {
    $.ajax({ url: url, type: "GET", success: function(response) { ... } })
  }
})

$("#and_yet_another_element").keypress(function() {
  //duh, when is this gonna end?
})
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class="title">Status Quo</h2>
      <div class="content">
        <div style="float:left; width: 600px">
          <%= image_tag "img/bus_packed.jpg" %>
        </div>
        <div class="illustration_caption">Logic is tightly coupled, packed</div>
        <div class="clearfloat"></div>
      </div>
    </div>

    
    <div class="slide">
      <h2 class="title">Status Quo</h2>
      <div class="content">
        <div style="float:left">
          <%= image_tag "img/twin-girls.jpg" %>
        </div>
        <div class="illustration_caption">No distinction between data and presentation</div>
        <div class="clearfloat"></div>
      </div>
    </div>

    
    <div class="slide">
      <h2 class="title">Status Quo</h2>
      <div class="content">
        <div style="float:left">
          <%= image_tag "img/reused_bag.png" %>
        </div>
        <div class="illustration_caption">No easy way to reuse code components</div>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class="title center">What did you say Steve?</h2>
      <div class="content center">
        <%= image_tag "img/steve.jpg" %>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class="title center one_sentence">Before we get into Backbone JS</h2>
    </div>
    
    
    <div class="slide">
      <h2 class='center highlight'>Underscore JS</h2>
      <div class="content center">
        <a href="http://documentcloud.github.com/underscore/" target="_blank">http://documentcloud.github.com/underscore/</a>
        <p style="margin-top:10px">Small library (< 4kb minified) that makes life easier</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center'>Underscore JS</h2>
      <div class='content'>
        <h2>Arrays</h2>
        <p>first, initial, last, rest, compact, flatten, without, union, intersection, difference, uniq, zip, indexOf, last, IndexOf, range</p>
        <br /><br />
        <h2>Collections</h2>
        <p>each,  map,  reduce,  reduceRight,  find,  filter,  reject,  all,  any,  include,  invoke,  pluck,  max,  min,  sortBy,  groupBy,  sortedIndex,  shuffle,  toArray,  size</p>        
        <br /><br />
        <h2>Objects</h2>
        <p>keys, values, functions, extend, defaults, clone, tap, has, isEqual, isEmpty, isElement, isArray, isArguments, isFunction, isString, isNumber, isBoolean, isDate, isRegExp, isNaN, isNull, isUndefined</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center one_sentence'>What does Backbone give you?</div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center one_sentence'>More Objects!</div>
    </div>
    
    
    <div class="slide">
      <div class='content center one_sentence'>
        <h2>Really useful Objects</h2>
        (or functions) <br />
        <br />
        typeof Backbone=== "object” <br />
        typeof Backbone.Model === “function” <br />
      </div>
    </div>
    
    <div class="slide">
      <div class='content center one_sentence'>
        <h2>Some not so useful</h2>
        <br/>
        typeof Backbone.Router=== "function” <br />
        <i>(something about single page apps)</i>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title center'>Model</h2>
      <div class='content center'>
        <%= image_tag "img/model.jpg" %>
        <%= image_tag "img/lego-donkey-kong.jpg" %>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center'>Model</h2>
      <div class='content'>
        <ul>
          <li>A representation of data</li>
          <li>Actions: saving, retrieving, conversion, validation, triggering events etc</li>
        </ul>
      </div>
    </div>
    <div class='slide'>
      <div class='content'>
      <br/>
      <br/>
      <br/>
      <pre class='sh_javascript_dom'>
      // Person object
      var person = {
        first_name: "Andrew",
        last_name: "Kim"
        favorite_color: "blue" 
      }
      </pre>
      </div>
    </div>

    <div class='slide'>
      <div class='content'>
        <br/>
        <br/>
        <pre class='sh_javascript_dom'>
        // A model that represents a person object
        var Person = Backbone.Model.extend({
          save: function() {
            ...
          },
          validate: function() {
            // Make sure a cat does not get in here
          },
          edit: function() {
            // I wanna change my name to "Mark Zuckerberg"
          },
          name: function(){
            var name = this.get(first.name);
            name = name + " " + this.get('last_name');
            return name;
          }
        });
        </pre>
      </div>
    </div>
    
    <div class='slide'>
      <div class='content'>
        <br/>
        <br/>
        <br/>
        <br/>
        <pre class='sh_javascript_dom'>
          var ak = new Person(person);
          ak.full_name();
          // "Andrew Kim"
        
          ak.attributes
          // {
          //   first_name: "Andrew"
          //   last_name: "Kim"
          //   favorite_color: blue
          // }

          ak.fetch() //- will get the data using AJAX using REST standards
          ak.save()  //- will save any changes using a PUT
    
        </pre>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title center'>Collection</h2>
      <div class='content'>
        <ul>
          <li>An ordered set of models</li>
          <li>Useful when working with "collection view" (a view with sub-views each of which contains a model)</li>
        </ul>
        <pre class='sh_javascript_dom'>
          // A pseudo-collection for the sake of illustration
          celebrities = [
            {
              name: "Barack Obama", 
              job: "US President"
            },
            {
              name: "Sandra Bullock", 
              job: "Actress"
            },
            {
              name: "David Beckham",
              job: "Soccer Player"
            },
            {
              name: "Arnold Schwarzenegger", 
              job: "N/A"
            }
          ]
        </pre>
      </div>
    </div>

    <div class='slide'>
      <div class='content'>
        <br/>
        <br/>
        <pre class='sh_javascript_dom'>
          var People = Backbone.Collection.extend({
            model: Person
          });

          var group = new People(celebrities);
          group.at(2) //- David Beckham model
          group.length //- 4
          group.remove(group.at(1));
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center'>View</h2>
      <div class='content center'>
        <%= image_tag "img/a-view-to-a-kill-poster.jpg" %>
        <p style="margin-top:15px">A View to a Kill (1985)</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h2 class='title center'>View</h2>
      <div class='content'>
        <ul>
          <li>A view in the traditional sense (presentation logic), and a "presenter"</li>
          <li>Captures user's interactions</li>
        </ul>
        <pre class="sh_javascript_dom">
        var PersonView = Backbone.View.extend({
          tagName: "li",
          className: "person",
          initialize: function() {
            // Housekeeping and event bindings etc
            this.model.bind('change', this.render);
            // usually initializing the temple
          }
          events: {
            'click .this' : 'doThat'
          },
          render: function() {
            $(this.el).html(this.template(this.model));
          },
          doThat: function() {
            // Do your stuff
          }
        })
        </pre>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title center'>View</h2>
      <div class='content'>
        <pre class="sh_javascript_dom">
          var akView = new PersonView({el:"#person", model: ak});
        </pre>
      </div>
    </div>

    <div class='slide'>
      <script>
        $(function(){
          var Person = Backbone.Model.extend({
            name: function(){
              return this.get('last_name') + ", " + this.get('first_name');
            }
          });
          var PersonView = Backbone.View.extend({
            model: Person,
            initialize: function(){
              this.model.bind("change", this.render, this)
              this.render();
            },
            render: function(){
              $(this.el).css('color', this.model.get('color'));
              $(this.el).html(this.model.name() + " "  + this.model.get('color'));
            }
          });
          var InputView = Backbone.View.extend({
            model: Person,
            events: {"keyup .color": 'updateColor'},
            updateColor: function(){
              var color = $(this.el).find(".color").val();
              this.model.set({color: color});
            }
          });
          var akim = new Person({first_name: 'Andrew', last_name: 'Kim', color: "green"});
          var iv = new InputView({el: "#color-input", model: akim});
          var pv = new PersonView({el: "#person", model: akim});
        });
      </script>
      <br />
      <br />
      <br />
      <br />

      <div id="demoperson" class='center'>
        <div id='color-input'>Color: <input type='text' class='color' name='color'></input></div>
        <div id='person'></div>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title center one_sentence'>What we've learned</h2>
    </div>
    
    
    <div class="slide">
      <h2 class='title'>Advantages</h2>
      <div class='content spacing_top'>
        <ul>
          <li>Organized code base, modular code</li>
        </ul>
        <div style="padding-left:100px">
          <br />
          |--------> models
          <br />
          |
          <br />
          |--------> views
          <br />
          |
          <br />
          |--------> collections
          <br />
          |
          <br />
          |--------> jst_templates
          <br />
          |
          <br />
          |--------> lib
        </div>
      </div>
    </div>

    <div class="slide">
      <h2 class='title'>Advantages</h2>
      <div class='content'>
        <ul>
          <li>Reusable code components (models, views)</li>
        </ul>
        <pre class='sh_javascript_dom'>
// Definition
var CategoryAutocompleteView = Backbone.View.extend({
  initialize: function() {
    ...
  },
  setupAutocomplete: function() {
    ...
  },
  setupDroppable: function(){
    ...
  }
})

var categoryAutocompleteView = new CategoryAutocompleteView({
  el: $("#categories"),
  model: category,
  droppable: true,
  onItemSelected: function(value, data) { ... }
})
        </pre>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title'>Advantages</h2>
      <div class='content'>
        <ul>
          <li>Design patterns and principles Dependency Injection, Publisher/Subscriber Pattern etc</li>
        </ul>
        <div class="center">
          <%= image_tag "img/publisher_subscriber.jpg", :style => "width:800px" %>
        </div>
      </div>
    </div>
    
    <div class="slide">
      <h2 class='title'>Advantages</h2>
      <div class='content'>
        <ul>
          <li>Testable (with Jasmine and Sinon)</li>
        </ul>
        <pre class='sh_javascript_dom'>
describe("Keyword", function() {
  var keyword;
  
  beforeEach(function() {
    keyword = new Keyword;
    spyOn($, "ajax").andCallFake(function(params) { params.success(1); })
    spyOn(keyword, "trigger");
  })
  
  function keyword_event_trigger() { return keyword.trigger.mostRecentCall.args; }

  it("should validate on create properly", function() {
    var errors = keyword.validateOnCreate();
    expect(errors.length).toBeGreaterThan(0);
    expect(errors).toContain(i18n.add_keyword_no_category_selected_nag);
  })
  
  it("should trigger an event after updating", function() {
    keyword.set({keyword: "new book", code: 1, original_keyword: "book"});
    keyword.update();
    var args = keyword_event_trigger();
    expect(args[0]).toEqual("keywordUpdatedEvent");
  }
}
        </pre>
      </div>
    </div>
    
    
    <div class='slide'>
      <h2 class='title'>Disadvantages</h2>
      <div class='content spacing_top'>
        <ul>
          <li>No clear design guidance (there’s always more than one way to do things)</li>
          <li>More files to manage/logic is spread</li>
          <li>Moderate learning curve</li>
        </ul>
      </div>
    </div>
    
    <div class='slide'>
      <h2 class='title'>Practices we apply</h2>
      <div class='content spacing_top'>
        <ul>
          <li>Override built in functionality of Model/View when neccessary (example?)</li>
          <li>Event is your friend</li>
          <li>Use descriptive names for events (i.e. "save" is not a good name)</li>
          <li>Use a templating language (Underscore, jQuery template, Handlebars). String concatenation stinks</li>
        </ul>
      </div>
    </div>
    
    <div class='slide'>
      <h2 class='title'>Resources</h2>
      <div class='content spacing_top'>        
        <ul>
          <li>
            <a href="http://backbonejs.org/" target="_blank">
              http://backbonejs.org/
            </a>
          </li>
          <li>
            <a href="http://documentcloud.github.com/backbone/docs/todos.html" target="_blank">
              http://documentcloud.github.com/backbone/docs/todos.html
            </a>
          </li>
          <li>
            <a href="http://www.quora.com/What-are-some-good-resources-for-Backbone-js" target="_blank">
              http://www.quora.com/What-are-some-good-resources-for-Backbone-js
            </a>
          </li>
          <li>
            <a href="https://github.com/addyosmani/backbone-fundamentals" target="_blank">
              https://github.com/addyosmani/backbone-fundamentals
            </a>
          </li>
          <li>
            <a href="http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html" target="_blank">
              http://tinnedfruit.com/2011/03/03/testing-backbone-apps-with-jasmine-sinon.html
            </a>
          </li>
          <li>
            <a href="http://trivektor.wordpress.com/2012/01/15/redo-the-classic-hangman-game-with-a-new-approach-backbone-js/">
              http://trivektor.wordpress.com/2012/01/15/redo-the-classic-hangman-game-with-a-new-approach-backbone-js/
            </a>
          </li>
        </ul>
      </div>
    </div>
    
    <div class='slide'>
      <h2 class='title center one_sentence'>
        Sample Application: 
        <a href="http://github-issues-browser.herokuapp.com/" target="_blank">Github Issues</a>
      </h2>
    </div>
    
    <div class='slide'>
      <h2 class='title center one_sentence'>
        And that's it. <a>Hasta la vista, baby</a>
      </h2>
    </div>
    
  </body>
</html>
