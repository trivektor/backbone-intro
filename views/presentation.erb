<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <title>Introduction to Backbone JS</title>
    <link charset="utf-8" href="/css/style.css" media="screen" rel="stylesheet" type="text/css">
    <link charset="utf-8" href="http://fonts.googleapis.com/css?family=Telex" media="screen" rel="stylesheet" type="text/css">
    <link charset="utf-8" href="/css/sh.css" media="screen" rel="stylesheet" type="text/css">
    <script charset="utf-8" src="/javascript/sh.js" type="text/javascript"></script>
    <script charset="utf-8" src="/javascript/sh_javascript_dom.js" type="text/javascript"></script>
    <script charset="utf-8" src="/javascript/jquery.js" type="text/javascript"></script>

    <script charset="utf-8" src="/javascript/master.js" type="text/javascript"></script>
  </head>
  <body onload="sh_highlightDocument();">

    
    <div class='slide'>
      <h1 class='title center highlight'>Introduction to Backbone JS</h1>
      <div class='content center' style="font-size:26px; margin-top:40px">
        <a href="http://github.com/wookimiii" target="_blank">Andrew Kim</a> 
        and 
        <a href="http://github.com/trivektor" target="_blank">Tri Vuong</a>
        <p style="margin-top:15px">Search and Data Tools</p>
      </div>
    </div>

    
    <div class='slide'>
      <h1 class='title'>What is Backbone JS?</h1>
      <div class='content'>
        <ul>
          <li>emerging Javascript framework</li>
          <li>created by Jeremy Ashkenas, author of CoffeeScript</li>
          <li>MVC Architecture</li>
          <li>used by major applications (LinkedIn, Basecamp, Pandora, Flow etc)</li>
        </ul>
      </div>
    </div>
    
    
    <div class='slide'>
      <h1 class='title'>Status Quo</h1>
      <div class='content'>
        <pre class='sh_javascript_dom'>
//Callback soup and salad (not as good as Specialty's though)
$("#element").click(function(){
  ...
})

$("#another_element").change(function(){
  if (...) {
    ...
  } else {
    $.ajax({ url: url, type: "GET", success: function(response) { ... } })
  }
})

$("#and_another_element").autocomplete({
  serviceUrl: url,
  onSelect: function(value, data) {
    $.ajax({ url: url, type: "GET", success: function(response) { ... } })
  }
})

$("#and_yet_another_element").keypress(function() {
  //duh, when is this gonna end?
})
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class="title">Status Quo</h1>
      <div class="content">
        <div style="float:left; width: 600px">
          <%= image_tag "img/bus_packed.jpg" %>
        </div>
        <div style="margin-left: 650px; margin-top:100px">Logic is tightly coupled, packed</div>
      </div>
    </div>

    
    <div class="slide">
      <h1 class="title">Status Quo</h1>
      <div class="content">
        <div style="float:left">
          <%= image_tag "img/twin-girls.jpg" %>
        </div>
        <div style="margin-left: 550px; margin-top:100px">No distinction between data and presentation</div>
      </div>
    </div>

    
    <div class="slide">
      <h1 class="title">Status Quo</h1>
      <div class="content">
        <div style="float:left; margin-right: 40px">
          <%= image_tag "img/reused_bag.png" %>
        </div>
        <div style="margin-top:130px">No easy way to reuse code components</div>
      </div>
    </div>
    
    
    <div class="slide">
      <div class="content center" style="padding-top:80px">
        <%= image_tag "img/steve.jpg" %>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class="title center one_sentence">Before we get into Backbone JS</h1>
    </div>
    
    
    <div class="slide">
      <h1 class='title center highlight'>Underscore JS</h1>
      <div class="content center">
        <a href="http://documentcloud.github.com/underscore/" target="_blank">http://documentcloud.github.com/underscore/</a>
        <p style="margin-top:10px">Small library (< 4kb minified) that makes life easier</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>Underscore JS</h1>
      <div class='content'>
        <h2>Arrays</h2>
        <p>first, initial, last, rest, compact, flatten, without, union, intersection, difference, uniq, zip, indexOf, last, IndexOf, range</p>
        <br /><br />
        <h2>Collections</h2>
        <p>each,  map,  reduce,  reduceRight,  find,  filter,  reject,  all,  any,  include,  invoke,  pluck,  max,  min,  sortBy,  groupBy,  sortedIndex,  shuffle,  toArray,  size</p>        
        <br /><br />
        <h2>Objects</h2>
        <p>keys, values, functions, extend, defaults, clone, tap, has, isEqual, isEmpty, isElement, isArray, isArguments, isFunction, isString, isNumber, isBoolean, isDate, isRegExp, isNaN, isNull, isUndefined</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center one_sentence'>What does Backbone give you?</div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center one_sentence'>More Objects!</div>
    </div>
    
    
    <div class="slide">
      <div class='content center one_sentence'>
        Everything is an Object <br />
        (or a function) <br />
        typeof Backbone=== "object” <br />
        typeof Backbone.Model === “function” <br />
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>Model</h1>
      <div class='content center'>
        <%= image_tag "img/model.jpg" %>
        <%= image_tag "img/lego-donkey-kong.jpg" %>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>Model</h1>
      <div class='content'>
        <ul>
          <li>A representation of data</li>
          <li>Actions: saving, retrieving, conversion, validation, triggering events etc</li>
        </ul>
        <pre class="sh_javascript_dom">
// A model that represents a book object
var book = {
  title: "Gulliver’s Travels",
  year: 1726,
  author: "Johnathan Swift" 
}


// A model that represents a person object
var Person = Backbone.Model.extend({
  save: function() {
    ...
  },
  validate: function() {
    // Make sure a cat does not get in here
  },
  edit: function() {
    // I wanna change my name to "Mark Zuckerberg"
  }
});
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>Collection</h1>
      <div class='content'>
        <ul>
          <li>An ordered set of models</li>
          <li>Useful when working with "collection view" (a view with sub-views each of which contains a model)</li>
        </ul>
        <pre class='sh_javascript_dom'>
// A pseudo-collection for the sake of illustration
People = [
	{
	  name: "Barack Obama", 
	  job: "US President"
	},
	{
	  name: "Sandra Bullock", 
	  job: "Actress"
	},
	{
	  name: "David Beckham",
	  job: "Soccer Player"
	},
	{
	  name: "Arnold Schwarzenegger", 
	  job: "N/A"
	}
]
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>View</h1>
      <div class='content center'>
        <%= image_tag "img/a-view-to-a-kill-poster.jpg" %>
        <p style="margin-top:15px">A View to a Kill (1985)</p>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>View</h1>
      <div class='content'>
        <ul>
          <li>A view in the traditional sense (presentation logic), and a "presenter"</li>
          <li>Captures user's interactions</li>
        </ul>
        <pre class="sh_javascript_dom">
var KeywordView = Backbone.Model.extend({
  tagName: "li",
  className: "keyword",
  initialize: function() {
    // Housekeeping and event bindings etc
  }
  events: {
    'click .this' : 'doThat'
  },
  render: function() {
    ...
  },
  doThat: function() {
    // Do your shit
  }
})
        </pre>
      </div>
    </div>
    
    
    <div class="slide">
      <h1 class='title center one_sentence'>What we've learned</h1>
    </div>
    
    
    <div class="slide">
      <h1 class='title center'>Advantages</h1>
      <div class='content'>
        <ul>
          <li>Organized code base, modular code</li>
        </ul>
      </div>
    </div>

    <div class="slide">
      <h1 class='title center'>Advantages</h1>
      <div class='content'>
        <ul>
          <li>Reusable code components (models, views)</li>
        </ul>
        <pre class='sh_javascript_dom'>
// Definition
var CategoryAutocompleteView = Backbone.View.extend({
  initialize: function() {
    ...
  },
  setupAutocomplete: function() {
    ...
  },
  setupDroppable: function(){
    ...
  }
})

var categoryAutocompleteView = new CategoryAutocompleteView({
  el: $("#categories"),
  model: category,
  droppable: true,
  onItemSelected: function(value, data) { ... }
})
        </pre>
      </div>
    </div>
    
    <div class="slide">
      <h1 class='title center'>Advantages</h1>
      <div class='content'>
        <ul>
          <li>Design patterns and principles Dependency Injection, Publisher/Subscriber Pattern, Single Responsibility etc</li>
        </ul>
      </div>
    </div>
    
    <div class="slide">
      <h1 class='title center'>Advantages</h1>
      <div class='content'>
        <ul>
          <li>Testable</li>
        </ul>
        <pre class='sh_javascript_dom'>
describe("Keyword", function() {
  var keyword;
  
  beforeEach(function() {
    keyword = new Keyword;
    spyOn($, "ajax").andCallFake(function(params) { params.success(1); })
    spyOn(keyword, "trigger");
  })
  
  function keyword_event_trigger() { return keyword.trigger.mostRecentCall.args; }

  it("should validate on create properly", function() {
    var errors = keyword.validateOnCreate();
    expect(errors.length).toBeGreaterThan(0);
    expect(errors).toContain(i18n.add_keyword_no_category_selected_nag);
  })
  
  it("should trigger an event after updating", function() {
    keyword.set({keyword: "new book", code: 1, original_keyword: "book"});
    keyword.update();
    var args = keyword_event_trigger();
    expect(args[0]).toEqual("keywordUpdatedEvent");
  }
}
        </pre>
      </div>
    </div>
    
    
    <div class='slide'>
      <h1 class='title center'>Disadvantages</h1>
      <div class='content' style="margin-top: 100px">
        <ul>
          <li>No clear design guidance (there’s always more than one way to do things)</li>
          <li>More files to manage/logic is spread</li>
          <li>Moderate learning curve</li>
        </ul>
      </div>
    </div>
    
    <div class='slide'>
      <h1 class='title center'>Practices we apply</h1>
      <div class='content'>
        <ul>
          <li>Override built in functionality of Model/View when neccessary (example?)</li>
          <li>Use a templating language (Underscore, jQuery template, Handlebars) is a must. String concatenation stinks</li>
        </ul>
      </div>
    </div>
    
    <div class='slide'>
      <h1 class='title center'>Resources</h1>
      <div class='content' style="margin-top: 100px">
        <ul>
          <li>
            <a href="https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites" target="_blank">
              https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites
            </a>
          </li>
          <li>
            <a href="http://www.quora.com/What-are-some-good-resources-for-Backbone-js" target="_blank">
              http://www.quora.com/What-are-some-good-resources-for-Backbone-js
            </a>
          </li>
        </ul>
      </div>
    </div>
    
  </body>
</html>
